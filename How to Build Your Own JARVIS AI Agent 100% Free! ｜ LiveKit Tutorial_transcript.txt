Speaker A: In this video I'm going to show you how to create your own advanced Jarvis AI voice agent using an open source tool called LifeKit and Python that is 100% free. Hi, I can't talk right now. Can I type to you instead?
Speaker B: Roger, boss. I'll switch to text based communication for our conversation check. Here is a joke for you. Why don't scientists trust atoms? Because they make up everything.
Speaker A: Hey, can you see what superhero this is on my shirt?
Speaker B: That appears to be Spider man on your shirt, sir. Though I must say the artistic interpretation is unique.
Speaker A: I'm also going to show you how to give your AI agent tools so it can do basically anything that you can write a Python function for. Hi, what's the weather in Vienna?
Speaker B: Roger, boss. I'll check the weather in Vienna for you. The weather in Vienna is sunny with a temperature of 25 degrees Celsius.
Speaker A: Can you look up the current Tesla stock price?
Speaker B: Very well, sir. I will now look up the current Tesla stock price. The current price of TSLA is $326.43.
Speaker A: And on top of that, I'm going to show you how to deploy your AI agent as an app so you can have it with you at any time in the day. Isn't that right, Jarvis?
Speaker B: Actually, since I'm the updated version of Jarvis, my name is Friday.
Speaker A: This video is actually a part two of a video I created before in which I created a simpler version of Jarvis using Elevenlabs. If you want to, you can check it out here in Info Card. Don't worry, you don't have to watch the video in order to follow this tutorial. Okay, so let's just jump right into it. So before we start, we have to look at LiveKit, our open source AI agent tool, which is completely free in comparison to other voice agent tools like Vapi Retail or 11 Labs, which I used in my previous tutorial. And it's really sophisticated. Even very big Companies like Open OpenAI use this. So if you ever talk to ChatGPT before with through the voice component, that's actually Live kit that you're talking to and it requires a little bit of programming skills because we develop our AI agent in Python. But what you do have is complete control as to how the agent operates. And on top of that it's completely free again. And you can also run this locally if you want to. So you have even more control about your AI agent. And it also comes with a lot of other functions which allows you to have a better experience. But more on that later. So this is how the Live Kit architecture roughly looks like. The part which we are going to focus on is this part over here, the AI agent, which we are going to implement in Python and we are going to connect to a large language model which is going to be Gemini, which is basically the brain of the agent. And you can also use any other sort of large language model that you want, like OpenAI, Claude, or even a local and large language model like Olama, if you want to. And then this AI agent would need to connect to a Live Kit server. The server can then run either in the cloud or you can even run this locally if you want to. And then you can use any sort of application to connect to the server to access your agent. And this is really cool because you can use one agent that you create in multiple different applications, like a web application or like a mobile app, and that allows it to be actually very diverse in its application. And on top of that, what we're going to use is something called Real Time API. And that's really cool because as the name suggests, that's really fast and has very low latency. And it's so fast that it feels like you're actually talking to someone over the phone. So the latency is that good. Another thing which is really cool is again, you can run everything locally. You can use Olama, which is a local, large language model. You can develop this locally and even have to server locally. So you can have everything locally and have complete control about your data privacy, if that's a concern for you. And again, this whole system here is completely free, so you don't pay anything and still are able to use very sophisticated functions. Okay, so the first thing we need to do is we need to set up our Live Kit component. For this we can simply Google Live Kit. Don't worry, I'm going to leave all the links down below in this video, the in the description, and then we click on the first link and then we click on Start building. That needs to load a little bit. Okay, so normally you would need to create an account. I already obviously have one. If you don't have one, just Create one. And then down here we need to create a project. We click on Create new Project. And then over here we would need to give this a name. Let's just call this Jarvis one or something like just Javas one. Click on Create and now we have our project created. We can then select it and then we can go to Settings over here, click on API keys, and then we can create a new API Key, we can create it over here. And then we would need to give this a name. We can simply call this, I don't know, Jarvis or something like that, and then click on Create key. Okay, so you will give. You will get three different things here actually. One is the WebSocket URL. Then the second thing is the API actual API key. And the next thing is the API secret. All of these three things you need to copy, so you can just copy them like this, right? And then you close this and it's really important that you actually save that where somewhere safe because you're not able to access these things again later. So save it like in a password saver or something like that. So the next thing we would need to do is to set up our Python environment. For this you can use any sort of IDE of your choice. I'm using visual code, and if you're also using visual code, I would advise you to install something called Copilot, which is a AI assistant. You can find it over here at the extension tab. And then you can click here and just type in copilot, Copilot. And then you can install this. This is an AI assistant that helps you develop faster. And you're going to see this in action in a bit. But for now we also need to create a new folder. I already did that. So if you also created your folder already, then you just open it right here. Let me open this for you. And the next thing we would need to do is create our files over here. You can click on this button to create a new file that we can type in agent P and then also tools.PI. we also need a prompt PI and a dot env file and then a requirements file. This is a. Txt file. Now we need to open a new terminal. You can press control shift p for that and then you can click on Create new terminal. And I'm going to use PowerShell and down here. Now you have your terminal open. And the next thing we would need to do is create a virtual environment. For this you can type in Python M venf venth. This will create a new virtual environment over here. And now we need to activate that. We can type in dot, backslash, vent and scripts and then activate. Now our virtual environment is activated. Then we need to open our requirements file. And here's where we would specify all of our libraries that we need to use. I'm just going to copy it in here so you don't have to watch me type. So these are the libraries we would need to use. And then we can press Control S to save this. And down in our terminal we can now install all of our requirements for this. We can type in PIP install R and you can use the autocomplete here so you don't have to write the name of the file. So you can simply press R and then press the tab button and then you present. Sorry about this. This is my antivirus software. So now everything's getting installed. This is going to take a while, so I'm going to fast forward. Okay, so now everything's installed and the next thing we would need to do is go to our.env file and here's where we would paste the three things that we copied from the Live Kit setup like that. And then we can save this before we continue, we would need a Google API key because we are going to use Gemini. And for this we would need to go back to the browser and then search for Gemini API key. And then we can click on this second link over here. And then we are at this page here. And then we can click on this button to create an API key. And here it would say that you need to search for a Google Cloud project. So for this you would need two things. You would need to have a Google account, which I assume you already have. And on top of that you would also need a Google Cloud account. Most of you probably don't have that. So you can simply search for create a Google Cloud account and you can create Create one. And then you would also need to create a Google Cloud project which you are going to save your API key in. I already have a couple of these. If you don't know how to create your Google Cloud project after you created the Google Cloud account, you can simply go ahead and search for Create Google Cloud project and then you can click on this first link over here. And down here you can click on this button. Sorry, this is in German, but it should be the same button. And then here is where you could create your project. You can simply call this Gemini Gemini API key or something like that. Doesn't really matter. And then you can click on Create. And after you created your project, you can go back to this page over here and then click again on this button. And then here should be able to select it. Let's just select this one. And then you can create API key in the existing project. And now here is your API key. You can simply copy this again. You have to save this somewhere safe because you are not able to look at this again. Once you want to close this window. And then we can go back into visual code and then I can zoom in here again. And here's where I can simply type in Google API key and then paste this and then save this. Now we can start with the Python implementation. For this we would need to go back to the browser and then we would need to search for Live Kit voice agent. And then we can click on this first, first link over here. And over here we can click on Voice AI quick start. And here's some sample code that we can use. We can scroll down and then copy it over here. And then we can go back to visual code and actually go into our agent PY file over here. And then we can paste everything that we just copied, like. Sorry, like this. And don't worry, I'm going to walk you through all of these lines of code. But for now we need to save this by pressing control S and then would need to type in another command in our terminal, which is going to be Python agent PY download files, which is going to download some essential files that we would need to execute this code. Simply execute this. And now these essential files are downloaded. And before I continue, we would need to change a little bit about this code because this code is actually using OpenAI instead of Gemini and we, we want to use Gemini, so we don't need to use this. For example, and here is where we can specify the large language model that we can use. Again, we are going to use Gemini. So first of all we need to import that so we can write from life kits.life kits.puterins import Google. Okay, and what you see here is actually Copilot. That's the thing that I recommended before the AI assistant. As you can see, it recommends me some lines of code that I can write and I can press the tab button to autocomplete that so I can write faster. Okay, so down here we have to change a large language model from OpenAI to Google. And here we need to also write beta. Okay, so we can now save this by pressing Ctrl S And I also want to change the voice. I can type instead of Carl, I can type Sharon and I can save this again. And then next we need to specify some prompts that we're going to use. For this we can go to our prompts PY file and I already prepared some here. So I'm simply going to paste it in here for you. So we have two prompts that we're going to use. One is basically the system prompt of the AI agent, which I Called agent instruction, which describes how the agent should operate. This is similar to how I did it in my last video. You have to just simply define the Persona of the AI agent, what basically the AI agent should be. And then in the specifics, you can define what it basically should do. And then you can also give it some examples to show how it should operate in certain scenarios. Here, just a simple conversation. So it basically speaks like a butler. And the next thing we need to specify is a session instruction. So, so every time you would start a conversation with the Live Kit agent, it would start a session, and in that session you would also need to specify how the agent should operate in that specific session. So you can also do that here. So here you can basically say, start the conversation with, or begin the conversation with saying, hi, my name is Jarvis. So this is like the welcoming message. Okay, so with that out of the way, we can simply save this prompt file and then we can go back to our agent PY file, and then we need to import these two prompts. We can write from prompt and import agent instruction and session instruction. All right, then we can save this again. We can now specify it here. Here's the agent instruction, like that. And then the session instruction is somewhere down here like that. Okay, so now let me break down this code for you. So first of all, we start by loading our.env file in here, so we have access to all our API keys, which we copied into a dot ENV file. And then the next thing is that we define this assistant class. And this is basically the class that takes care of our agent. For this, we simply using the agent class that comes right out of the box of Life Kit. And we don't do much here, we only give it the instruction, the agent instruction, which we defined before. And the most important thing here is this entry point function. You always have to define this entry point function to start a conversation in. Here we define the session of the conversation, in which we define which large language model we're using. And then we would start the session and then we would give the session or AI agent, in this case it's the assistant class. And. And then we would wait until someone would connect to this session over here. And based on the instruction that we find here, we generate the reply. And down here you would start this Python file. Here you define this entry point, and then it, from here it would start or execute everything that we defined within this function down here. Okay, hopefully that made sense to you. If you wanted to understand it in more detail, you can Always read through the documentation, but for now we can try this out. For this we need to go to our terminal down here and then we type in Python Agent Console to run this locally. Hi, my name is Jarvis, your personal assistant. How may I help you? Hi, how are you doing? I am doing splendidly, thank you for asking. How may I be of assistance to you today? To access this call you can simply press Control C. Wait a minute. Very well. Okay, so as you can see, we can now talk to our agent. Before we continue, there's one more thing I want to change. So this is the second version of Jarvis, and in the movies the second version was called Friday. So I want to change that as well. So first we need to change the voice from a male voice to a female voice. So I'm going to change, change it to this voice, then I'm going to save that. I'm also going to change the prompt PY so we can replace Jarvis with Friday. So I'm going to replace that here, then I'm going to save that. And if we go down and try this out again.
Speaker B: Hi, my name is Friday, your personal assistant. How may I help you?
Speaker A: Hi, how are you doing?
Speaker B: I am doing splendidly, thank you for asking. What menial task can I assist you with today?
Speaker A: Okay, now we have our Friday. So currently we can only talk to our AI agent and I want it to be multimodal so you can interact with it through different ways as well. So for example, make it see us with a camera. And to do that we can simply go down to the room options down here and then we can type in video enabled true, not false, but true. Okay, and another thing I want to change actually is the placement of the large language model. It doesn't really matter if you put this in the session or the agent, but I just think that it makes more sense if you put it here actually. So let me quickly do this like this. And what you can also configure is a temperature actually, which means, which is an expression of the randomness of the agent. So the higher this value, the more random the behavior of the agent becomes. So if you wanted to make a lot of jokes or something like that, it's recommended to have this a little bit higher. So I set it to 0.8. Okay, so if you save this, you can now test this out by using the Playground of Live Kit, which is a web app. So we can go to the browser and we can go to Google. And for this we can Google Live Kit Playground and then we click on the first link. And then we need to select our project that we created prior to this, which is Jarvis 1. And then we connect to this. And first I need to disconnect because I don't have the application running right now. So what we need to do is go back to the visual code implementation and then go down here to the console. And now instead of python agent, PY console, we type in def, which makes it run this agent and enables it so we can connect through a different application to this here. So if we go back to the browser now and connect to this.
Speaker B: Hi, my name is Friday, your personal assistant. How may I help you?
Speaker A: Wait a minute, let me scroll down so you can see me through the camera. Can you see me now?
Speaker B: I can see you now. Is there anything I can help you with?
Speaker A: How many fingers am I showing right now?
Speaker B: Are you testing my abilities already? You are currently showing two fingers.
Speaker A: How about now?
Speaker B: Are we playing the numbers game? You are now showing five fingers.
Speaker A: Okay, let me talk. Let me type something in the chat so you can answer to that.
Speaker B: Of course, sir. As you wish. I will monitor the chat for your next instruction. As you wish. I will now tell you a joke about Spider Man. What is Spider Man's favorite drink? Iced tea. Are you sure you don't need me for anything else, sir?
Speaker A: That was really bad. What was the point of that joke, man?
Speaker B: I will add tell better jokes to my to do list, sir.
Speaker A: Okay, for now, that's it. Thank you. Bye. See, as you probably noticed, the response time from the agent is actually really quick. And another thing that you can do actually is interrupt it while it's talking about and it will stop talking if you interrupt it. And then we'll keep talking once you're finished so we can test it out as well. So.
Speaker B: Hi, my name is Friday, your personal assistant. How may I help you?
Speaker A: Can you tell me a story about Spider Man?
Speaker B: Roger, boss. Here is a story about Spider man, who is known for saving the day.
Speaker A: In New York City, about Iron Man.
Speaker B: Will do, sir. I will now generate a story about Iron man for you.
Speaker A: Now, we want our AI agent to be able to perform tasks for us. And for this you would need to define tools for it to use. And for this we can go ahead and go to our tools py and import some libraries that we are going going to use. I'm going to use these libraries here. The first one is logging so I can log everything that happens in the background so I can see what happens. And the most important things here is from life Kit agent, the function tool and the run context. And these two things we need for the actual functions themselves. Here, the request we need to make an API call to like a weather API and this import over here we need to use for a search engine which is called DuckDuckGo search. That's like a Google search engine, but it's free, so that's why I'm using it. And the next thing we need to do is define the actual functions and, and these are asynchronous functions. So what we need to write is async and then we need to define the functions. The first one I'm going to define is get weather information. So I call this get weather. And as you can see here, Copilot is already showing me a suggestion for code. So I'm going to autocomplete this. But most of it is not correct, so I'm going to change it a little bit. Location is I want to call the city actually. And the important thing here is that we are giving it a so called run context like this. And this over here is actually a description about the function itself. So the agent will be able to know when to use this function. And this says get the current weather for the given location, let's say given city. Okay, so next we need to write the actual code of this function. With this we need to write try response is equals request get and then we call a weather API to get our information. But I'm going to use another one, I'm going to use this one here. I'm doing this in a try catch section because this can fail. So we can actually catch this if an error occurs. So next we need to actually make sure that this request was successful. So we ask this in this if statement here and then we need to return this information if it was correct. But we need to write strip here and also want to lock this. So I'm going to write this into the logger like this. And then I also have to handle the case when it didn't work. So like this. And also I have to handle the exception case like this. So as you can see, using Copilot here is really, really good because it's a. It enables me to create this code very, very fast. And this is actually already it for this function. And now we have to annotate this to be a function tool so the agent knows that it can use this function. So we need to write like, write it like this. Okay, that was the first function done. And the second function is actually very similar. We Also have to write async, but this time we need to write search. And I'm going to use copilot again here. This is actually already correct, but here's not quite correct. I need to change this a little bit. So I'm going to say results equals duckduckgoal search run dot run. But I have to change this a little bit. I have to call this a tool. Input equals query. Everything else is actually already correct. And again have to annotate this as a function tool. Okay, now we can go back to our AI agent PY file and we need to specify these function tools so the AI agent knows when to use this or to use this actually. So we can import these two functions in here. So we can say from tools input, get weather and search web. And then down here we can actually define these tools for it. So we can write it like this. We don't need these comments actually. And then we can save this and then we can go down to our console and then clear this actually. And then we can execute this again.
Speaker B: Hi, my name is Friday, your personal assistant. How may I help you?
Speaker A: Hi, can you look up the weather in Vienna for me?
Speaker B: Check. I am now looking up the weather in Vienna. Certainly, sir. As you wish. The weather in Vienna is sunny with a temperature of 29 degrees Celsius. Is there anything else I can help you with today?
Speaker A: Can you google for me how many Iron man movies there are?
Speaker B: Roger, boss. I will now search the web to find out how many Iron man movies there are. Right away, sir. There are three Iron man movies plus appearances in other MCU films. Anything else I can help you with?
Speaker A: That's actually. Thank you. Okay, so when we look at our console here, we can see that here it executed weather function executing tool and here's. But the logger actually printed out from the information that we got from the API. And down here is what the search result was when I asked for the Ironman movies. And as you can see here, here's a list of all the Ironman movies that it was able to fetch from the Internet. So the way this works is if we go go back into our tools py and we look at our functions a little bit closer. In this case, to get weather function, what we do here is we pass a parameter called city. And just based on its name, the AI knows what to pass. So if I ask for the weather in Vienna, it knows that it needs to pass Vienna as a city here and here in my code, I pass it to my API call as a Variable, as you can see here. And it was able to show the result of the API call in the console because I specified it here in the logger. So that's the only thing it actually does. And same goes for the search web tool here. What you need to pass here is a query. It's basically a search query query. So what you're searching for, and based on the description of this function and the name of this variable, the AI agent also automatically knows what to pass here. So if I ask him to search for a specific thing, it will come up with a fitting query. And this variable that's going to be passed here is also going to be passed to the search engine and then I get the result back and simply print it here and also give it back to the AI agent so I can find formulate a fitting answer to me. So if you want to create any sort of additional function that you want, so like for example, setting an appointment or sending an email or something like that, all you need to do is create another function that does that. You have to come up with the business logic yourself, and then you need to pass all the parameters that you need just simply here, and all you need to do is give it a fitting name. And most of the time the AI agent is able to execute that correctly. So basically you can actually create any tool that you want, as long as you can express that as a Python function. So before we continue, I added one more function tool for you guys, because you guys were asking for this a lot in my previous video, and that's sending messages to people, and in this case it's sending an email to people via my Gmail account. And for this, it's very much the same as before, in which I just created an asynchronous function, and then I define some fitting variables that I should pass to this function. And I'm not going to go too much into detail here, because it's just the same as before. But what I did additionally here I gave the variables a description here. So the AI agent will get this right every time and not mix them up in any sort of capacity. And here I just connect to, or I just configure like a email server, which I connect to. And what you need to do if you're using Gmail for any sort of app is to, first of all, you need to specify your Gmail account, of course. And the next thing you need to do is create a Gmail app password. That's what you can do in the Settings tab in your Gmail account. Don't worry, I'm going to link a video down below in the description which explains how you can create this app password for yourself. And then here I just create like the message. Here I define the recipient of the message, and then here I just connect to the server and. And then here I just sent the email, so it's actually really easy. And don't worry, you don't have to type this yourself. You can download the whole code from this complete tutorial in the description down below, so you don't have to type anything yourself. Additionally, if you want to use these variables here, I added them in the dot ENV file so like before with the API keys. So if you write get env, you just load these variables, these specific variables here into your function so you can use them. Okay, so now we can just try this out. First of all, I need to run this in dev mode again so I can connect to it because I want to use the Playground from Live Kit again because using the chat here is actually very handy. Okay, so this is up and running.
Speaker B: Hi, my name is Friday, your personal assistant. How may I help you?
Speaker A: Okay, can you send an email to email address for me?
Speaker B: Will do, sir. I will now send an email. What is the email address, subject and message you'd like me to send? Of course, sir. I need the subject and the message for the email.
Speaker A: The subject is going to be test and message is going to be hi, my name is Friday.
Speaker B: Check sending an email to vanhi.david.nguyenmail.com with the subject, test and the message. Hi, my name is Friday. Voila, the email has been sent.
Speaker A: Okay, let me look this up. And there we go. We got the email. So now if you want to launch this as an app, there's actually a template code which we can use from the Live Kit website. But keep in mind, this is for an Android app and not an iOS app. So if you want to use iOS, you have to use a different template. But for now we can click on or we can go to the browser and I have this template repository open here. And before we proceed, there are two things we need to do. First. First is we need to install something and for this we can click on this link. And don't worry, I'm gonna provide all of the links in the video description down below and what we need to install Swinget. And you can use this command here and then run it in the terminal to install it. And if you're using Linux or Mac os, you can simply use these commands here. And for this you can simply go to the terminal. You can either use the normal terminal if you want. I'm going to use PowerShell again. All you need to do is you need to simply paste this command in here and then just run it. All right, I already installed it, so I'm not going to do that. And once you did that, we can do we have to do another thing, which is we have to create a sandbox and here's another link for that. And I'm also going to provide that link in the video description. And then we get to our account and get to the sandbox section. And then we need to to create a token server and we can click on this to create a token server. And over here is a button to create one. So here's the information about our create a token server. And the important thing, what we need is actually this id. This is the ID of the sandbox. You can copy this and once you did that, there's a another command we need to run in the. In the terminal, which we find down over here. And we would need to copy this command and then we would need to paste this in our terminal. But this will actually copy the sample code into your local folder. So before you do that, you need to navigate to a folder where you want to copy it to. So if we go back to a terminal, I'm going to navigate to the folder which I want to use. So I'm going to use the CD command here. Then I'm going to open this folder. Here's where I want to copy this code into. Now you would need to paste this command in here and here, where it says token server, sandbox id. You would need to replace that with the ID of the sandbox that you just created. But there are actually two things that are missing here, and it's not mentioned in the template code or the tutorial from Life Kit. For some reason, I think they forgot about this, which is you need to also specify your API key and your API secret. Those are the two things we created in the very beginning in the Life Kit account that we created. And the correct command actually looks something like this. As you can see here. It's actually the same thing here. I specified my sandbox id, but also I had to specify here my API key and my API secret. Again, those are the things we created in the beginning. You can just copy that from the dot ENV file and then we need to press enter and here. Now we can give this a name, and you can simply give this any name. Like, I don't know, Friday app. And then you can press Enter and it's going to download it for you. I already downloaded this, so I'm not going to do that again. So I'm simply going to exit this here after you downloaded it. In the folder that you specified, you should now have this folder over here, which we named Friday App. And in here you have all of the code for the actual Android app. And in order to open this, we would need a program called Android Studio, which is a ide, to develop Android applications. And for this, you can simply go to the browser, Google Android Studio, and then download and install it. Once you did that, you would now have Android Studio available, and you can simply open that, and then you can actually open over here your folder, and you would need to specify where that is. So I can simply say tutorials. And in here we have this Friday app, and we can simply open this Trust project. And now you have all of this code within this ide. Let me make this a little bit bigger for you. And now you can simply run this app by clicking this button over here. And this will actually open an emulator of a phone, and then run this app. Now, this app is up and running, but I'm also going to show you how to run this on your actual phone. So you can click on this button over here, which is the device manager, and then you can click on this button over here.
Speaker B: And.
Speaker A: And this is a way to pair your app with your actual phone. What you need to do is you need to go into the settings, and then you need to navigate to developer options, wireless debugging, and then pair using QR code. So that would look something like this. So what you need to do is you need to go into the settings over here, and then you need to search for developer like this, and then you can go to the developer options, and then somewhere down here is wireless debugging, and then you can click on that, and then you can enable that. And then here you can click on Pair Device with QR code, and then you need to scan the QR code. After you scan the QR code, you would then have the option to select your actual phone over here. Here you have the physical device, and then you can run this code again, and then it will automatically install the app on your phone, so you can select and run it. So once you ran your app on your actual device, you will now have this app over here, and then we can simply open this.
Speaker B: Hi, my name is Friday, your personal assistant. How may I help you.
Speaker A: Hi, can you look up the weather for me in Vienna?
Speaker B: Roger, boss. I'll look up the weather for you in Vienna. Alrighty. The weather in Vienna is partly cloudy with a temperature of 28°C.
Speaker A: Perfect. So now it's working. So I hope you guys enjoyed this one. This video actually took a long time to do, so A like would be much appreciated.
Speaker B: And don't forget to subscribe.
Speaker A: I actually had a lot of other features planned for this video, but since we're almost at already 40 minutes long in this video, I decided to postpone it for another part. This is probably becoming a series at this point, and who knows, maybe next time I'm gonna create Edith from the Spider man movies, which was the AI in the smart glasses from Tony Stark. And again, if there's any sort of function you want to see in the future part, then just let me know in the comments below. And additionally, if you're struggling with any sort of AI development, you can get in touch with me through the contact information in the description down below. I might be able to help you out. And stay tuned for the next part, because in the next one I'm going to show you how to give Friday a face. Isn't that right, Friday?
Speaker B: Yes, that's right, boss. See you in the next one.
